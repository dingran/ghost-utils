rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /users/{uid} {
      allow read, write: if isUser(uid);
    }
    match /ghost_sites/{site} {
      allow read: if isOwner();
      allow delete: if isOwner();
      allow update: if isOwner() && willBeOwner();
      allow create: if willBeOwner();
      
      function siteData() {
  			return get(/databases/$(database)/documents/ghost_sites/$(site)).data 
  		}
      
      match /webhooks/{hook} {
      	allow read, write: if siteData().authorId == request.auth.uid
      }
      
      match /pages/{page} {
      	allow read, write: if siteData().authorId == request.auth.uid
      }
    }
  }
}
function isUser(uid) {
  return isSignedIn() && request.auth.uid == uid;
}
function isSignedIn() {
  return request.auth.uid != null;
}
function isOwner(){
  return isUser(currentData().authorId);
}
function isSiteOwner(){
  return isUser(currentData().siteAuthorId);
}
function willBeOwner(){
  return isUser(incomingData().authorId);
}
function willBeSiteOwner(){
  return isUser(incomingData().siteAuthorId);
}
function currentData() {
  return resource.data;
}
function incomingData() {
  return request.resource.data;
}

